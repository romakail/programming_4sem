        -:    0:Source:list.cpp
        -:    0:Graph:listTest.gcno
        -:    0:Data:listTest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "list.h"
        -:    2:
        7:    3:list_T::list_T ()
        -:    4:{
        7:    5:	nElements = 0;
        -:    6:
        7:    7:	head = NULL;
        7:    8:	tail = NULL;
        7:    9:}
        -:   10:
        -:   11://----------------------------------------------------------------------------------------------------------------------------------
        -:   12:
       14:   13:list_T::~list_T ()
        -:   14:{
        -:   15:
        7:   16:	listElement* currentElement = head;
        7:   17:	listElement* temp = 0;
       51:   18:	while (currentElement != NULL)
        -:   19:	{
       22:   20:		temp = currentElement->next;
       22:   21:		free (currentElement);
       22:   22:		currentElement = temp;
        -:   23:	}
        7:   24:}
        -:   25:
        -:   26://---------------------------------------------------------------------------------------------------------------------------------
        -:   27:
        4:   28:listElement* list_T::addElementToHead (object newElementVal)
        -:   29:{
        -:   30:	// printf ("I have started adding an element\n");
        -:   31:	assert (nElements >= 0);
        4:   32:	if (nElements == 0xffffffff /* UINT_MAX */)
    #####:   33:		return NULL;
        -:   34:
        4:   35:	listElement* addedElement = static_cast <listElement*> (calloc (1, sizeof(*addedElement)));
        4:   36:	if (addedElement == 0)
        -:   37:	{
        -:   38:		// printf ("Error with allocating memory")
        1:   39:		return 0;
        -:   40:	}
        -:   41:	else
        -:   42:	{
        3:   43:		if (nElements == 0)
        -:   44:		{
        -:   45:			//printf ("case nElements == 0\n");
        2:   46:			assert (head == NULL);
        2:   47:			assert (tail == NULL);
        -:   48:
        2:   49:			head = addedElement;
        2:   50:			tail = addedElement;
        -:   51:
        2:   52:			addedElement->next = NULL;
        2:   53:			addedElement->prev = NULL;
        2:   54:			addedElement->content = newElementVal;
        -:   55:
        2:   56:			nElements++;
        -:   57:
        2:   58:			return addedElement;
        -:   59:		}
        -:   60:		else // if (nElements > 0)
        -:   61:		{
        -:   62:			//printf ("case 0 < nElements < max\n")
        -:   63:
        1:   64:			assert (head != NULL);
        1:   65:			assert (tail != NULL);
        -:   66:
        1:   67:			head->prev = addedElement;
        1:   68:			addedElement->next = head;
        -:   69:
        1:   70:			head = addedElement;
        1:   71:			addedElement->prev = NULL;
        -:   72:
        1:   73:			addedElement->content = newElementVal;
        -:   74:
        1:   75:			nElements++;
        -:   76:
        1:   77:			return addedElement;
        -:   78:		}
        -:   79:	}
        -:   80:
        -:   81:	// return NULL;
        -:   82:}
        -:   83:
        -:   84://---------------------------------------------------------------------------------------------------------------------------------
        -:   85:
       25:   86:listElement* list_T::addElementToTail (object newElementVal)
        -:   87:{
        -:   88:	// printf ("I have started adding an element\n");
        -:   89:	assert (nElements >= 0);
       25:   90:	if (nElements == 0xffffffff /* UINT_MAX */)
    #####:   91:		return NULL;
        -:   92:
       25:   93:	listElement* addedElement = static_cast <listElement*> (calloc (1, sizeof(*addedElement)));
       25:   94:	if (addedElement == 0)
        -:   95:	{
        -:   96:		// printf ("Error with allocating memory")
        1:   97:		return 0;
        -:   98:	}
        -:   99:	else
        -:  100:	{
       24:  101:		if (nElements == 0)
        -:  102:		{
        -:  103:			//printf ("case nElements == 0\n");
        5:  104:			assert (head == NULL);
        5:  105:			assert (tail == NULL);
        -:  106:
        5:  107:			head = addedElement;
        5:  108:			tail = addedElement;
        -:  109:
        5:  110:			addedElement->next = NULL;
        5:  111:			addedElement->prev = NULL;
        5:  112:			addedElement->content = newElementVal;
        -:  113:
        5:  114:			nElements++;
        -:  115:
        5:  116:			return addedElement;
        -:  117:		}
        -:  118:		else // if (nElements > 0)
        -:  119:		{
        -:  120:			//printf ("case 0 < nElements < max\n")
        -:  121:
       19:  122:			assert (head != NULL);
       19:  123:			assert (tail != NULL);
        -:  124:
       19:  125:			tail->next = addedElement;
       19:  126:			addedElement->prev = tail;
        -:  127:
       19:  128:			tail = addedElement;
       19:  129:			addedElement->next = NULL;
        -:  130:
       19:  131:			addedElement->content = newElementVal;
        -:  132:
       19:  133:			nElements++;
        -:  134:
       19:  135:			return addedElement;
        -:  136:		}
        -:  137:	}
        -:  138:
        -:  139:	// return NULL;
        -:  140:}
        -:  141:
        -:  142://-----------------------------------------------------------------------------------------------------------------
        -:  143:
        5:  144:int list_T::deleteElement  (listElement* deletedElement)
        -:  145:{
        -:  146:	// printf ("I have started deleting a certain object from a list\n");
        5:  147:	assert (deletedElement);
        -:  148:	// printf ("nElements = %d\n", nElements);
        -:  149:	//assert (nElements > 0);
        -:  150:	// printf ("Deleting %p\n", deletedElement);
        -:  151:
        5:  152:	if      ((deletedElement->next != NULL) && (deletedElement->prev != NULL))
        -:  153:	{
        1:  154:		deletedElement->prev->next = deletedElement->next;
        1:  155:		deletedElement->next->prev = deletedElement->prev;
        -:  156:	}
        4:  157:	else if ((deletedElement->next == NULL) && (deletedElement->prev != NULL))
        -:  158:	{
        2:  159:		deletedElement->prev->next = NULL;
        2:  160:		tail = deletedElement->prev;
        -:  161:	}
        2:  162:	else if ((deletedElement->next != NULL) && (deletedElement->prev == NULL))
        -:  163:	{
        1:  164:		deletedElement->next->prev = NULL;
        1:  165:		head = deletedElement->next;
        -:  166:	}
        1:  167:	else if ((deletedElement->next == NULL) && (deletedElement->prev == NULL))
        -:  168:	{
        1:  169:		head = deletedElement->next;
        1:  170:		tail = deletedElement->prev;
        -:  171:	}
        -:  172:	// else
        -:  173:	// {
        -:  174:	// 	printf ("What might have happened  line = %d\n", __LINE__);
        -:  175:	// 	assert (0);
        -:  176:	// }
        -:  177:
        5:  178:	free (deletedElement);
        5:  179:	nElements--;
        -:  180:
        -:  181:	// printf ("in the end of delete nElements = %d\n", nElements);
        -:  182:	// printf ("I have finished deleting a cerain object\n");
        5:  183:	return 0;
        -:  184:}
        -:  185:
        -:  186://----------------------------------------------------------------------------------------------------------------------------------------
        -:  187:
        6:  188:listElement* list_T::findElement (object desiredValue)
        -:  189:{
        6:  190:	listElement* currentElement = head;
       48:  191:	while (currentElement != NULL)
        -:  192:	{
       24:  193:		if (currentElement->content == desiredValue)
        -:  194:		{
        3:  195:			return currentElement;
        -:  196:		}
       21:  197:		currentElement = currentElement->next;
        -:  198:	}
        3:  199:	return 0;
        -:  200:}
        -:  201:
        -:  202://------------------------------------------------------------------------------
        -:  203:
        8:  204:int list_T::elementsNumber ()
        -:  205:{
        8:  206:	return nElements;
        -:  207:}
        -:  208:
        -:  209://----------------------------------------------------------------------------------------------------------------------------------------
        -:  210:
        1:  211:int list_T::iterate (int (*iteratedFunction) (object))
        -:  212:{
        1:  213:	listElement* currentElement = head;
       11:  214:	while (currentElement != NULL)
        -:  215:	{
        5:  216:		iteratedFunction (currentElement->content);
        5:  217:		currentElement = currentElement->next;
        -:  218:	}
        1:  219:	return 0;
        -:  220:}
        -:  221:
        -:  222://--------------------------------------------------------------------------------------------------------------
        -:  223:
        -:  224:// int dumpElement (object num)
        -:  225:// {
        -:  226:// 	return printf ("%d\n", num);
        -:  227:// }
        -:  228:
        -:  229://----------------------------------------------------------------------------------------------------------------------------------------
        -:  230:
        -:  231:// int list_T::dump (int outputFd)
        -:  232:// {
        -:  233:// 	dprintf (outputFd, "=====DUMP=====\n");
        -:  234:// 	dprintf (outputFd, "nElements = %d\n", nElements);
        -:  235:// 	dprintf (outputFd, "head = %p\n", head);
        -:  236:// 	dprintf (outputFd, "tail = %p\n\n", tail);
        -:  237:// 	dprintf (outputFd, "--------------\n\n");
        -:  238://
        -:  239:// 	listElement* currentElement = head;
        -:  240:// 	while (currentElement != NULL)
        -:  241:// 	{
        -:  242:// 		dprintf (outputFd, "this = %p\n", currentElement);
        -:  243:// 		dprintf (outputFd, "val  = %d\n", currentElement->content);
        -:  244:// 		dprintf (outputFd, "prev = %p\n", currentElement->prev);
        -:  245:// 		dprintf (outputFd, "next = %p\n", currentElement->next);
        -:  246:// 		dprintf (outputFd, "\n");
        -:  247:// 		currentElement = currentElement->next;
        -:  248:// 	}
        -:  249://
        -:  250:// 	dprintf (outputFd, "==============\n");
        -:  251:// 	return 0;
        -:  252:// }
        -:  253:
        -:  254://----------------------------------------------------------------------------------------------------------------------------------------
        -:  255:
        8:  256:int list_T::verification ()
        -:  257:{
        8:  258:	if (this->checkCycle() != 0)
        1:  259:		return CYCLE;
        7:  260:	if (nElements != this->countElements())
        1:  261:		return WRONG_N_ELEMENTS;
        6:  262:	return SUCCESS;
        -:  263:}
        -:  264:
        -:  265://----------------------------------------------------------------------------------------------------------------------------------------
        -:  266:
        8:  267:int list_T::checkCycle ()
        -:  268:{
        8:  269:	listElement* ptr1 = head;
        8:  270:	listElement* ptr2 = head;
        8:  271:	int fail = 0;
        -:  272:
       28:  273:	while (fail == 0)
        -:  274:	{
       17:  275:		if (ptr2 == NULL)
        4:  276:			break;
        -:  277:		else
       13:  278:			ptr2 = ptr2->next;
        -:  279:
       13:  280:		if (ptr2 == NULL)
        3:  281:			break;
        -:  282:		else
       10:  283:			ptr2 = ptr2->next;
        -:  284:
       10:  285:		if (ptr1 != NULL)
       10:  286:			ptr1 = ptr1->next;
        -:  287:
       10:  288:		if (ptr1 == ptr2)
        1:  289:			fail = 1;
        -:  290:	}
        8:  291:	return fail;
        -:  292:}
        -:  293:
        -:  294://----------------------------------------------------------------------------------------------------------------------------------------
        -:  295:
        8:  296:int list_T::countElements ()
        -:  297:{
        8:  298:	listElement* currentElement = head;
        8:  299:	int counter = 0;
       48:  300:	while (currentElement != NULL)
        -:  301:	{
       20:  302:		counter++;
       20:  303:		currentElement = currentElement->next;
        -:  304:	}
        8:  305:	return counter;
        -:  306:}
        -:  307:
        -:  308:
        -:  309:
        -:  310:
        -:  311:
        -:  312:
        -:  313:
        -:  314:
        -:  315:
        -:  316:
        -:  317:
        -:  318:
        -:  319:
        -:  320:
        -:  321:
        -:  322:
        -:  323:
        -:  324:
        -:  325:
        -:  326:
        -:  327://
